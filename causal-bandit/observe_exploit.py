from math import exp
# lets start with setting where a bunch of them are 1/2 and a bunch are 1

N = 20 # total number of variables
N1 = 19 # number of variables with q = 1
N2 = N - N1 # number of variables with q = .5

h = 10000 # total number of timesteps to be divided
A = 1/16.0

# we will have 3 groups of tau values,
# tau_0  = # times we do X_i=0 for each i < N
# tau_1 = # times we do X_i=1 for each i < N
# tau = # number of times do X_j = {0,1} for each j >= N,{0,1}

def C1(N1,N2,t1,t):
    return (N1-1)*t1+2*N2*t

def C2(N1,N2,t1,t):
    return N1*t1+2*(N2-1)*t

def cost(N1,N2,h,A,t,t1,t0):
    c1 = C1(N1,N2,t1,t)
    c2 = C2(N1,N2,t1,t)
    return N1*exp(-A*(t1+c1))+N1*exp(-A*t0)+2*N2*exp(-A*(t+.25*c2))



# brute force explore the space where N1*tau_0+N1*tau_1+2N*tau = h
fmin = 1
optimal = (0,0,0)
for t in range(0,int(h/2*N2)):
    for t1 in range(0,(h-2*N2*t)/N1):
        t0 = (h-2*N2*t - N1*t1)/N1
        f = cost(N1,N2,h,A,t,t1,t0)
        if f < fmin:
            fmin = f
            optimal = (t,t1,t0)
print fmin
print optimal
print [2*N*x/float(h) for x in optimal]
        
      
